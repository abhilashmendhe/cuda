#include <cuda.h>
#include <stdio.h>
#include <math.h>

//#define N 10

int N;

__global__ void scale(int *a,int index,int size){
        int i=0;
	for(i=index+1;i<size;i++){
        a[i]=a[i]/a[index];
       } 
}

__global__ void reduce(int **a, int index, int size){
         

}


int main(int argc, char *argv[]){
	int **h_a, **h_b;
	int **dev_a;
	int i;
	itn j;
        
        /*Extract the matrix size from cmd-line arguments*/
	N=atoi(argv[1]);	

	h_a=(int *)malloc(sizeof(int)*N);
	h_b=(int *)malloc(sizeof(int)*N);

        for(i=0;i<N;i++){
        h_a[i]=(int *)malloc(sizeof(int)*N);
        h_b[i]=(int *)malloc(sizeof(int)*N);
        }
        
	//allocate the memory on the GPU
	cudaMalloc ( (void**)&dev_a, N*N * sizeof (int) );
	
	//fill the arrays 'a'  CPU
	for ( i = 0; i < N; i++) {
	    for(j=0;j<N;j++)
		h_a[i][j] = (rand()%10)+1;
	}
	
	printf("Vector a is :\n");
	for(i=0; i<N; i++) printf("%d  ", h_a[i]);

	//copy the arrays 'a' onto the GPU
	for(int i=0;i<N;i++)
	cudaMemcpy( &dev_a[i], h_a, N * sizeof(int), cudaMemcpyHostToDevice);
				
        //launch the kernel 1				
	add<<<1,N>>> (dev_a);

	//launch the kernel 2
 	add2<<<1,N>>> (dev_a);
	
	//copy the array 'a back from the GPU to the CPU
	for(i=0;i<N;i++)
	cudaMemcpy( h_b[i], &dev_a[i], N * sizeof(int),cudaMemcpyDeviceToHost );
								
								
	//display the results
	printf("\nVector c = a+b:\n");
	for ( i = 0; i < N; i++) {
	    for(j=0;j<N;j++)
		printf( "%d  ", h_b[i][j]);  
	}
	printf("\n");	
	
	//free the memory allocated on the GPU
	cudaFree( dev_a );
	free(h_a);
	free(h_b);
	
	return 0;
}





	
